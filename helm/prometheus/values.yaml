rbac:
  create: true
imagePullSecrets: []
serviceAccounts:
  server:
    create: true
    name: ""
    annotations: {}
commonMetaLabels: {}
configmapReload:
  reloadUrl: ""
  env: []
  prometheus:
    enabled: true
    name: configmap-reload
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: v0.85.0
      digest: ""
      pullPolicy: IfNotPresent
    containerPort: 8080
    containerPortName: metrics
    extraArgs: {}
    extraVolumeDirs: []
    extraVolumeMounts: []
    extraConfigmapMounts: []
    containerSecurityContext: {}
    livenessProbe:
      httpGet:
        path: /healthz
        port: metrics
        scheme: HTTP
      periodSeconds: 10
      initialDelaySeconds: 2
    readinessProbe:
      httpGet:
        path: /healthz
        port: metrics
        scheme: HTTP
      periodSeconds: 10
    startupProbe:
      enabled: false
      httpGet:
        path: /healthz
        port: metrics
        scheme: HTTP
      periodSeconds: 10
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 32Mi
server:
  name: server
  clusterRoleNameOverride: ""
  releaseNamespace: false
  sidecarContainers: {}
  sidecarTemplateValues: {}
  image:
    repository: quay.io/prometheus/prometheus
    tag: ""
    digest: ""
    pullPolicy: IfNotPresent
  command: []
  priorityClassName: ""
  runtimeClassName: ""
  enableServiceLinks: true
  prefixURL: ""
  baseURL: ""
  env: []
  defaultFlagsOverride: []
  extraFlags:
    - web.enable-lifecycle
  configPath: /etc/config/prometheus.yml
  storagePath: ""
  global:
    scrape_interval: 1m
    scrape_timeout: 10s
    evaluation_interval: 1m
  remoteWrite: []
  remoteRead: []
  tsdb: {}
  otlp: {}
  exemplars: {}
  probeHeaders: []
  extraArgs: {}
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraHostPathMounts: []
  extraConfigmapMounts: []
  extraSecretMounts: []
  configFromSecret: ""
  configMapOverrideName: ""
  extraConfigmapLabels: {}
  fullnameOverride: ""
  ingress:
    enabled: false
    ingressClassName: ""
    annotations: {}
    extraLabels: {}
    hosts: []
    path: /
    pathType: Prefix
    extraPaths: []
    tls: []
  route:
    main:
      enabled: false
      apiVersion: ""
      kind: ""
      annotations: {}
      labels: {}
      parentRefs: []
      hostnames: []
      additionalRules: []
      filters: []
      matches:
        - path:
            type: PathPrefix
            value: /
      httpsRedirect: false
  strategy:
    type: Recreate
  hostAliases: []
  tolerations: []
  nodeSelector: {}
  affinity: {}
  podAntiAffinity: ""
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  topologySpreadConstraints: []
  podDisruptionBudget:
    enabled: false
  persistentVolume:
    enabled: true
    statefulSetNameOverride: ""
    accessModes:
      - ReadWriteOnce
    labels: {}
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    subPath: ""
  emptyDir:
    medium: ""
    sizeLimit: ""
  podAnnotations: {}
  podLabels: {}
  alertmanagers: []
  replicaCount: 1
  revisionHistoryLimit: 10
  configMapAnnotations: {}
  deploymentAnnotations: {}
  statefulSet:
    enabled: false
    annotations: {}
    labels: {}
    podManagementPolicy: OrderedReady
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
      gRPC:
        enabled: false
        servicePort: 10901
    pvcDeleteOnStsDelete: false
    pvcDeleteOnStsScale: false
  daemonSet:
    enabled: false
    annotations: {}
    labels: {}
  tcpSocketProbeEnabled: false
  probeScheme: HTTP
  readinessProbeInitialDelay: 30
  readinessProbePeriodSeconds: 5
  readinessProbeTimeout: 4
  readinessProbeFailureThreshold: 3
  readinessProbeSuccessThreshold: 1
  livenessProbeInitialDelay: 30
  livenessProbePeriodSeconds: 15
  livenessProbeTimeout: 10
  livenessProbeFailureThreshold: 3
  livenessProbeSuccessThreshold: 1
  startupProbe:
    enabled: false
    periodSeconds: 5
    failureThreshold: 30
    timeoutSeconds: 10
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  hostNetwork: false
  dnsPolicy: ClusterFirst
  portName: ""
  verticalAutoscaler:
    enabled: false
  dnsConfig: {}
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534
  containerSecurityContext: {}
  service:
    enabled: true
    annotations: {}
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
    externalTrafficPolicy: ""
    gRPC:
      enabled: false
      servicePort: 10901
    statefulsetReplica:
      enabled: false
      replica: 0
    additionalPorts: []
  terminationGracePeriodSeconds: 300
  retention: 15d
  retentionSize: ""
ruleFiles: {}
scrapeConfigFiles: []
serverFiles:
  alerting_rules.yml:
    groups:
      - name: kubernetes-pods
        rules:
          - alert: PodOOMKilled
            expr: increase(kube_pod_container_status_restarts_total{reason="OOMKilled"}[5m])
              > 0
            for: 0m
            labels:
              severity: critical
              category: memory
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} was
                OOMKilled
              description: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} was
                killed due to Out of Memory (OOM). Container {{
                $labels.container }} exceeded its memory limits. This may
                indicate insufficient memory limits or memory leaks.
              runbook_url: https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/
              dashboard_url: http://localhost:9090/graph?g0.expr=kube_pod_container_status_restarts_total%7Breason%3D%22OOMKilled%22%7D&g0.tab=1
          - alert: PodHighMemoryUsage
            expr: (container_memory_working_set_bytes{container!="POD",container!=""} /
              container_spec_memory_limit_bytes) > 0.9
            for: 2m
            labels:
              severity: warning
              category: memory
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} has high
                memory usage
              description: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is using
                {{ $value | humanizePercentage }} of its memory limit. This may
                lead to OOMKilled if usage continues to increase.
              runbook_url: https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/
          - alert: PodCrashLoopBackOff
            expr: kube_pod_status_phase{phase="Running"} == 0 and
              kube_pod_status_phase{phase="Pending"} == 0 and
              kube_pod_status_phase{phase="Succeeded"} == 0 and
              kube_pod_status_phase{phase="Failed"} == 0
            for: 5m
            labels:
              severity: warning
              category: pod-health
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is in
                CrashLoopBackOff
              description: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is
                repeatedly crashing and restarting. Check pod logs for errors.
              runbook_url: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/
          - alert: PodFrequentRestarts
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0.1
            for: 5m
            labels:
              severity: warning
              category: pod-health
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is
                restarting frequently
              description: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is
                restarting {{ $value | humanize }} times per second. This may
                indicate application issues or resource constraints.
              runbook_url: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/
          - alert: PodCPUThrottling
            expr: rate(container_cpu_cfs_throttled_seconds_total[5m]) > 0.1
            for: 2m
            labels:
              severity: warning
              category: cpu
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} is experiencing CPU throttling
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is
                being CPU throttled. Current throttling rate: {{ $value }}. This
                indicates the pod is hitting its CPU limits."
              runbook_url: https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/
              dashboard_url: http://localhost:9090/graph?g0.expr=rate(container_cpu_cfs_throttled_seconds_total%5B5m%5D)%20%3E%200.1&g0.tab=1
          - alert: PodHighCPUUsage
            expr: (rate(container_cpu_usage_seconds_total[5m]) * 100) > 80
            for: 3m
            labels:
              severity: warning
              category: cpu
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} has high CPU usage
              description: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is using
                {{ $value }}% CPU, which is above 80% threshold.
              runbook_url: https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/
          - alert: PodCrashLoopBackOff
            expr: kube_pod_status_phase{phase="Running"} == 0 and
              kube_pod_status_phase{phase="Pending"} == 0 and
              kube_pod_status_phase{phase="Succeeded"} == 0 and
              kube_pod_status_phase{phase="Failed"} == 0
            for: 1m
            labels:
              severity: critical
              category: pod-health
              service: kubernetes
            annotations:
              summary: Pod {{ $labels.pod }} is in CrashLoopBackOff
              description: Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is in
                CrashLoopBackOff state, indicating it keeps crashing and
                restarting.
              runbook_url: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/
          - alert: TestAlert
            expr: kube_pod_info{namespace="oom-test"} == 1
            for: 0m
            labels:
              severity: warning
              category: test
              service: kubernetes
            annotations:
              summary: "🧪 TEST ALERT: Pod exists in oom-test namespace"
              description: "This is a test alert triggered by the presence of a pod in the
                oom-test namespace. Pod: {{ $labels.pod }}"
              runbook_url: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/
  alerts: {}
  recording_rules.yml: {}
  rules: {}
  alert-rules.yml: {}
  prometheus.yml:
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/alert-rules.yml
      - /etc/config/rules
      - /etc/config/alerts
    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
              - localhost:9090
      - job_name: kubernetes-apiservers
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_service_name
              - __meta_kubernetes_endpoint_port_name
            action: keep
            regex: default;kubernetes;https
      - job_name: kubernetes-nodes
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels:
              - __meta_kubernetes_node_name
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics
      - job_name: kubernetes-nodes-cadvisor
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels:
              - __meta_kubernetes_node_name
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      - job_name: kubernetes-service-endpoints
        honor_labels: true
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape
            action: keep
            regex: true
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
            action: drop
            regex: true
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            action: replace
            target_label: __address__
            regex: (.+?)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            action: replace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_service_name
            action: replace
            target_label: service
          - source_labels:
              - __meta_kubernetes_pod_node_name
            action: replace
            target_label: node
      - job_name: kubernetes-service-endpoints-slow
        honor_labels: true
        scrape_interval: 5m
        scrape_timeout: 30s
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
            action: keep
            regex: true
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            action: replace
            target_label: __address__
            regex: (.+?)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            action: replace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_service_name
            action: replace
            target_label: service
          - source_labels:
              - __meta_kubernetes_pod_node_name
            action: replace
            target_label: node
      - job_name: prometheus-pushgateway
        honor_labels: true
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_probe
            action: keep
            regex: pushgateway
      - job_name: kubernetes-services
        honor_labels: true
        metrics_path: /probe
        params:
          module:
            - http_2xx
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_probe
            action: keep
            regex: true
          - source_labels:
              - __address__
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels:
              - __param_target
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_service_name
            target_label: service
      - job_name: kubernetes-pods
        honor_labels: true
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            action: keep
            regex: true
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
            action: drop
            regex: true
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: "[$2]:$1"
            target_label: __address__
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            action: replace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_pod_name
            action: replace
            target_label: pod
          - source_labels:
              - __meta_kubernetes_pod_phase
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels:
              - __meta_kubernetes_pod_node_name
            action: replace
            target_label: node
      - job_name: kubernetes-pods-slow
        honor_labels: true
        scrape_interval: 5m
        scrape_timeout: 30s
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
            action: keep
            regex: true
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: "[$2]:$1"
            target_label: __address__
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            action: replace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_pod_name
            action: replace
            target_label: pod
          - source_labels:
              - __meta_kubernetes_pod_phase
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels:
              - __meta_kubernetes_pod_node_name
            action: replace
            target_label: node
extraScrapeConfigs: ""
alertRelabelConfigs: {}
networkPolicy:
  enabled: false
forceNamespace: monitoring
extraManifests: []
alertmanager:
  enabled: true
  config:
    global:
      smtp_smarthost: smtp.gmail.com:587
      smtp_from: sandeep.opensearch@gmail.com
      smtp_auth_username: sandeep.opensearch@gmail.com
      smtp_auth_password: your-app-password
      smtp_require_tls: true
    route:
      group_by:
        - alertname
        - cluster
        - service
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: web.hook
      routes:
        - match:
            severity: critical
          receiver: critical-alerts
          group_wait: 5s
          repeat_interval: 30m
        - match:
            severity: warning
          receiver: warning-alerts
          group_wait: 30s
          repeat_interval: 2h
    receivers:
      - name: web.hook
        webhook_configs:
          - url: http://localhost:5002/webhook
            send_resolved: true
      - name: critical-alerts
        email_configs:
          - to: sandeep.opensearch@gmail.com
            subject: "🚨 CRITICAL: {{ .GroupLabels.alertname }}"
            body: |
              {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}

              Labels:
              {{ range .Labels.SortedPairs }}
                {{ .Name }}: {{ .Value }}
              {{ end }}

              Runbook: {{ .Annotations.runbook_url }}
              Dashboard: {{ .Annotations.dashboard_url }}
              {{ end }}
        webhook_configs:
          - url: http://localhost:5002/critical
            send_resolved: true
          - url: http://localhost:5003/webhook
            send_resolved: true
      - name: warning-alerts
        email_configs:
          - to: sandeep.opensearch@gmail.com
            subject: "⚠️ WARNING: {{ .GroupLabels.alertname }}"
            body: |
              {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}

              Labels:
              {{ range .Labels.SortedPairs }}
                {{ .Name }}: {{ .Value }}
              {{ end }}

              Runbook: {{ .Annotations.runbook_url }}
              Dashboard: {{ .Annotations.dashboard_url }}
              {{ end }}
        webhook_configs:
          - url: http://localhost:5002/warning
            send_resolved: true
          - url: http://localhost:5003/webhook
            send_resolved: true
    inhibit_rules:
      - source_match:
          severity: critical
        target_match:
          severity: warning
        equal:
          - alertname
          - cluster
          - service
  persistence:
    enabled: true
    annotations: {}
    labels: {}
    accessModes:
      - ReadWriteOnce
    size: 2Gi
    emptyDir: {}
  podSecurityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534
kube-state-metrics:
  enabled: true
  resources:
    limits:
      cpu: 100m
      memory: 64Mi
    requests:
      cpu: 50m
      memory: 32Mi
prometheus-node-exporter:
  enabled: true
  rbac:
    pspEnabled: false
  containerSecurityContext:
    allowPrivilegeEscalation: false
  resources:
    limits:
      cpu: 50m
      memory: 32Mi
    requests:
      cpu: 25m
      memory: 16Mi
prometheus-pushgateway:
  enabled: true
  serviceAnnotations:
    prometheus.io/probe: pushgateway
  resources:
    limits:
      cpu: 50m
      memory: 32Mi
    requests:
      cpu: 25m
      memory: 16Mi
resources:
  limits:
    memory: 256Mi
  requests:
    memory: 128Mi
