image:
  registry: docker.io
  repository: traefik
  tag: null
  pullPolicy: IfNotPresent
commonLabels: {}
deployment:
  enabled: true
  kind: Deployment
  replicas: 3
  revisionHistoryLimit: null
  terminationGracePeriodSeconds: 60
  minReadySeconds: 0
  healthchecksPort: null
  healthchecksHost: ""
  healthchecksScheme: null
  readinessPath: ""
  livenessPath: ""
  annotations: {}
  labels: {}
  podAnnotations: {}
  podLabels: {}
  additionalContainers: []
  additionalVolumes: []
  initContainers: []
  shareProcessNamespace: false
  dnsPolicy: ""
  dnsConfig: {}
  hostAliases: []
  imagePullSecrets: []
  lifecycle: {}
  runtimeClassName: ""
  goMemLimitPercentage: 0.9
podDisruptionBudget:
  enabled: true
  maxUnavailable: 1
  minAvailable: null
ingressClass:
  enabled: true
  isDefaultClass: true
  name: ""
core:
  defaultRuleSyntax: ""
experimental:
  abortOnPluginFailure: false
  fastProxy:
    enabled: false
    debug: false
  kubernetesGateway:
    enabled: false
  plugins: {}
  localPlugins: {}
gateway:
  enabled: true
  name: ""
  namespace: ""
  annotations: {}
  infrastructure: {}
  listeners:
    web:
      port: 8000
      hostname: ""
      protocol: HTTP
      namespacePolicy: null
gatewayClass:
  enabled: true
  name: ""
  labels: {}
ingressRoute:
  dashboard:
    enabled: false
    annotations: {}
    labels: {}
    matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    services:
      - name: api@internal
        kind: TraefikService
    entryPoints:
      - traefik
    middlewares: []
    tls: {}
  healthcheck:
    enabled: false
    annotations: {}
    labels: {}
    matchRule: PathPrefix(`/ping`)
    services:
      - name: ping@internal
        kind: TraefikService
    entryPoints:
      - traefik
    middlewares: []
    tls: {}
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1
readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
startupProbe: {}
providers:
  kubernetesCRD:
    enabled: true
    allowCrossNamespace: false
    allowExternalNameServices: false
    allowEmptyServices: true
    ingressClass: ""
    namespaces: []
    nativeLBByDefault: false
  kubernetesIngress:
    enabled: true
    allowExternalNameServices: false
    allowEmptyServices: true
    ingressClass: null
    namespaces: []
    publishedService:
      enabled: true
      pathOverride: ""
    nativeLBByDefault: false
    strictPrefixMatching: false
  kubernetesGateway:
    enabled: false
    experimentalChannel: false
    namespaces: []
    labelselector: ""
    nativeLBByDefault: false
    statusAddress:
      ip: ""
      hostname: ""
      service:
        enabled: true
        name: ""
        namespace: ""
  file:
    enabled: false
    watch: true
    content: ""
volumes: []
additionalVolumeMounts: []
logs:
  general:
    format: null
    level: INFO
    filePath: ""
    noColor: false
  access:
    enabled: false
    format: null
    bufferingSize: null
    timezone: ""
    filters:
      statuscodes: ""
      retryattempts: false
      minduration: ""
    addInternals: false
    fields:
      general:
        defaultmode: keep
        names: {}
      headers:
        defaultmode: drop
        names: {}
metrics:
  addInternals: false
  prometheus:
    entryPoint: metrics
    addEntryPointsLabels: null
    addRoutersLabels: null
    addServicesLabels: null
    buckets: ""
    manualRouting: false
    headerLabels: {}
    service:
      enabled: false
      labels: {}
      annotations: {}
    disableAPICheck: null
    serviceMonitor:
      enabled: false
      apiVersion: monitoring.coreos.com/v1
      metricRelabelings: []
      relabelings: []
      jobLabel: ""
      interval: ""
      honorLabels: false
      scrapeTimeout: ""
      honorTimestamps: false
      enableHttp2: false
      followRedirects: false
      additionalLabels: {}
      namespace: ""
      namespaceSelector: {}
    prometheusRule:
      enabled: false
      apiVersion: monitoring.coreos.com/v1
      additionalLabels: {}
      namespace: ""
  otlp:
    enabled: false
    addEntryPointsLabels: null
    addRoutersLabels: null
    addServicesLabels: null
    explicitBoundaries: []
    pushInterval: ""
    serviceName: null
    http:
      enabled: false
      endpoint: ""
      headers: {}
      tls:
        ca: ""
        cert: ""
        key: ""
        insecureSkipVerify: null
    grpc:
      enabled: false
      endpoint: ""
      insecure: false
      tls:
        ca: ""
        cert: ""
        key: ""
        insecureSkipVerify: false
ocsp:
  enabled: false
  responderOverrides: {}
tracing:
  addInternals: false
  serviceName: null
  resourceAttributes: {}
  capturedRequestHeaders: []
  capturedResponseHeaders: []
  safeQueryParams: []
  sampleRate: null
  otlp:
    enabled: false
    http:
      enabled: false
      endpoint: ""
      headers: {}
      tls:
        ca: ""
        cert: ""
        key: ""
        insecureSkipVerify: false
    grpc:
      enabled: false
      endpoint: ""
      insecure: false
      tls:
        ca: ""
        cert: ""
        key: ""
        insecureSkipVerify: false
global:
  checkNewVersion: true
  sendAnonymousUsage: false
  azure:
    enabled: false
    images:
      proxy:
        image: traefik
        tag: latest
        registry: docker.io/library
      hub:
        image: traefik-hub
        tag: latest
        registry: ghcr.io/traefik
additionalArguments: []
env: []
envFrom: []
ports:
  traefik:
    port: 8080
    hostPort: null
    hostIP: null
    expose:
      default: false
    exposedPort: 8080
    protocol: TCP
  web:
    port: 8000
    expose:
      default: true
    exposedPort: 80
    targetPort: null
    protocol: TCP
    nodePort: null
    redirections:
      entryPoint: {}
    forwardedHeaders:
      trustedIPs: []
      insecure: false
    proxyProtocol:
      trustedIPs: []
      insecure: false
    transport:
      respondingTimeouts:
        readTimeout: null
        writeTimeout: null
        idleTimeout: null
      lifeCycle:
        requestAcceptGraceTimeout: null
        graceTimeOut: null
      keepAliveMaxRequests: null
      keepAliveMaxTime: null
  websecure:
    port: 8443
    hostPort: null
    containerPort: null
    expose:
      default: true
    exposedPort: 443
    targetPort: null
    protocol: TCP
    nodePort: null
    appProtocol: null
    allowACMEByPass: false
    http3:
      enabled: false
      advertisedPort: null
    forwardedHeaders:
      trustedIPs: []
      insecure: false
    proxyProtocol:
      trustedIPs: []
      insecure: false
    transport:
      respondingTimeouts:
        readTimeout: null
        writeTimeout: null
        idleTimeout: null
      lifeCycle:
        requestAcceptGraceTimeout: null
        graceTimeOut: null
      keepAliveMaxRequests: null
      keepAliveMaxTime: null
    tls:
      enabled: true
      options: ""
      certResolver: ""
      domains: []
    middlewares: []
  metrics:
    port: 9100
    expose:
      default: false
    exposedPort: 9100
    protocol: TCP
tlsOptions: {}
tlsStore: {}
service:
  enabled: true
  single: true
  type: LoadBalancer
  annotations: {}
  annotationsTCP: {}
  annotationsUDP: {}
  labels: {}
  spec: {}
  loadBalancerSourceRanges: []
  externalIPs: []
  additionalServices: {}
autoscaling:
  enabled: false
  minReplicas: null
  maxReplicas: null
  metrics: []
  behavior: {}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: '{{ template "traefik.fullname" . }}'
persistence:
  enabled: false
  name: data
  existingClaim: ""
  accessMode: ReadWriteOnce
  size: 128Mi
  storageClass: ""
  volumeName: ""
  path: /data
  annotations: {}
  subPath: ""
certificatesResolvers: {}
hostNetwork: false
rbac:
  enabled: true
  namespaced: false
  aggregateTo: []
  secretResourceNames: []
podSecurityPolicy:
  enabled: false
serviceAccount:
  name: ""
serviceAccountAnnotations: {}
resources:
  limits:
    cpu: 200m
  requests:
    cpu: 60m
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
priorityClassName: ""
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
podSecurityContext:
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532
extraObjects: []
namespaceOverride: ""
instanceLabelOverride: ""
versionOverride: ""
hub:
  token: ""
  offline: null
  namespaces: []
  apimanagement:
    enabled: false
    admission:
      listenAddr: ""
      secretName: hub-agent-cert
      selfManagedCertificate: false
      customWebhookCertificate: {}
      restartOnCertificateChange: true
      annotations: {}
    openApi:
      validateRequestMethodAndPath: false
  aigateway:
    enabled: false
    maxRequestBodySize: null
  providers:
    consulCatalogEnterprise:
      enabled: false
      cache: false
      connectAware: false
      connectByDefault: false
      constraints: ""
      defaultRule: Host(`{{ normalize .Name }}`)
      endpoint:
        address: ""
        datacenter: ""
        endpointWaitTime: 0
        httpauth:
          password: ""
          username: ""
        scheme: ""
        tls:
          ca: ""
          cert: ""
          insecureSkipVerify: false
          key: ""
        token: ""
      exposedByDefault: true
      namespaces: ""
      partition: ""
      prefix: traefik
      refreshInterval: 15
      requireConsistent: false
      serviceName: traefik
      stale: false
      strictChecks: passing, warning
      watch: false
    microcks:
      enabled: false
      auth:
        clientId: ""
        clientSecret: ""
        endpoint: ""
        token: ""
      endpoint: ""
      pollInterval: 30
      pollTimeout: 5
      tls:
        ca: ""
        cert: ""
        insecureSkipVerify: false
        key: ""
  redis:
    cluster: null
    database: null
    endpoints: ""
    username: ""
    password: ""
    sentinel:
      masterset: ""
      username: ""
      password: ""
    timeout: ""
    tls:
      ca: ""
      cert: ""
      key: ""
      insecureSkipVerify: false
  sendlogs: null
  tracing:
    additionalTraceHeaders:
      enabled: false
      traceContext:
        parentId: ""
        traceId: ""
        traceParent: ""
        traceState: ""
oci_meta:
  enabled: false
  repo: traefik
  images:
    proxy:
      image: traefik
      tag: latest
    hub:
      image: traefik-hub
      tag: latest
